export var PERFORM_ACTION = 'PERFORM_ACTION';
export var RESET = 'RESET';
export var ROLLBACK = 'ROLLBACK';
export var COMMIT = 'COMMIT';
export var SWEEP = 'SWEEP';
export var TOGGLE_ACTION = 'TOGGLE_ACTION';
export var SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';
export var JUMP_TO_STATE = 'JUMP_TO_STATE';
export var JUMP_TO_ACTION = 'JUMP_TO_ACTION';
export var IMPORT_STATE = 'IMPORT_STATE';
var PerformAction = /** @class */ (function () {
    function PerformAction(action, timestamp) {
        this.action = action;
        this.timestamp = timestamp;
        this.type = PERFORM_ACTION;
        if (typeof action.type === 'undefined') {
            throw new Error('Actions may not have an undefined "type" property. ' +
                'Have you misspelled a constant?');
        }
    }
    return PerformAction;
}());
export { PerformAction };
var Reset = /** @class */ (function () {
    function Reset(timestamp) {
        this.timestamp = timestamp;
        this.type = RESET;
    }
    return Reset;
}());
export { Reset };
var Rollback = /** @class */ (function () {
    function Rollback(timestamp) {
        this.timestamp = timestamp;
        this.type = ROLLBACK;
    }
    return Rollback;
}());
export { Rollback };
var Commit = /** @class */ (function () {
    function Commit(timestamp) {
        this.timestamp = timestamp;
        this.type = COMMIT;
    }
    return Commit;
}());
export { Commit };
var Sweep = /** @class */ (function () {
    function Sweep() {
        this.type = SWEEP;
    }
    return Sweep;
}());
export { Sweep };
var ToggleAction = /** @class */ (function () {
    function ToggleAction(id) {
        this.id = id;
        this.type = TOGGLE_ACTION;
    }
    return ToggleAction;
}());
export { ToggleAction };
var SetActionsActive = /** @class */ (function () {
    function SetActionsActive(start, end, active) {
        if (active === void 0) { active = true; }
        this.start = start;
        this.end = end;
        this.active = active;
        this.type = SET_ACTIONS_ACTIVE;
    }
    return SetActionsActive;
}());
export { SetActionsActive };
var JumpToState = /** @class */ (function () {
    function JumpToState(index) {
        this.index = index;
        this.type = JUMP_TO_STATE;
    }
    return JumpToState;
}());
export { JumpToState };
var JumpToAction = /** @class */ (function () {
    function JumpToAction(actionId) {
        this.actionId = actionId;
        this.type = JUMP_TO_ACTION;
    }
    return JumpToAction;
}());
export { JumpToAction };
var ImportState = /** @class */ (function () {
    function ImportState(nextLiftedState) {
        this.nextLiftedState = nextLiftedState;
        this.type = IMPORT_STATE;
    }
    return ImportState;
}());
export { ImportState };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvc3RvcmUtZGV2dG9vbHMvc3JjL2FjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLGdCQUFnQixDQUFDO0FBQy9DLE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDN0IsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUNuQyxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDN0IsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQztBQUM3QyxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztBQUMvQyxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDO0FBRTNDLElBQUE7SUFHRSx1QkFBbUIsTUFBYyxFQUFTLFNBQWlCO1FBQXhDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxjQUFTLEdBQVQsU0FBUyxDQUFRO29CQUYzQyxjQUFjO1FBRzVCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQ2IscURBQXFEO2dCQUNuRCxpQ0FBaUMsQ0FDcEMsQ0FBQztTQUNIO0tBQ0Y7d0JBdkJIO0lBd0JDLENBQUE7QUFYRCx5QkFXQztBQUVELElBQUE7SUFHRSxlQUFtQixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO29CQUZwQixLQUFLO0tBRW1CO2dCQTdCMUM7SUE4QkMsQ0FBQTtBQUpELGlCQUlDO0FBRUQsSUFBQTtJQUdFLGtCQUFtQixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO29CQUZwQixRQUFRO0tBRWdCO21CQW5DMUM7SUFvQ0MsQ0FBQTtBQUpELG9CQUlDO0FBRUQsSUFBQTtJQUdFLGdCQUFtQixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO29CQUZwQixNQUFNO0tBRWtCO2lCQXpDMUM7SUEwQ0MsQ0FBQTtBQUpELGtCQUlDO0FBRUQsSUFBQTs7b0JBQ2tCLEtBQUs7O2dCQTdDdkI7SUE4Q0MsQ0FBQTtBQUZELGlCQUVDO0FBRUQsSUFBQTtJQUdFLHNCQUFtQixFQUFVO1FBQVYsT0FBRSxHQUFGLEVBQUUsQ0FBUTtvQkFGYixhQUFhO0tBRUk7dUJBbkRuQztJQW9EQyxDQUFBO0FBSkQsd0JBSUM7QUFFRCxJQUFBO0lBR0UsMEJBQ1MsS0FBYSxFQUNiLEdBQVcsRUFDWCxNQUFzQjs4Q0FBQTtRQUZ0QixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLFdBQU0sR0FBTixNQUFNLENBQWdCO29CQUxmLGtCQUFrQjtLQU05QjsyQkE3RE47SUE4REMsQ0FBQTtBQVJELDRCQVFDO0FBRUQsSUFBQTtJQUdFLHFCQUFtQixLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtvQkFGaEIsYUFBYTtLQUVPO3NCQW5FdEM7SUFvRUMsQ0FBQTtBQUpELHVCQUlDO0FBRUQsSUFBQTtJQUdFLHNCQUFtQixRQUFnQjtRQUFoQixhQUFRLEdBQVIsUUFBUSxDQUFRO29CQUZuQixjQUFjO0tBRVM7dUJBekV6QztJQTBFQyxDQUFBO0FBSkQsd0JBSUM7QUFFRCxJQUFBO0lBR0UscUJBQW1CLGVBQW9CO1FBQXBCLG9CQUFlLEdBQWYsZUFBZSxDQUFLO29CQUZ2QixZQUFZO0tBRWU7c0JBL0U3QztJQWdGQyxDQUFBO0FBSkQsdUJBSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5cbmV4cG9ydCBjb25zdCBQRVJGT1JNX0FDVElPTiA9ICdQRVJGT1JNX0FDVElPTic7XG5leHBvcnQgY29uc3QgUkVTRVQgPSAnUkVTRVQnO1xuZXhwb3J0IGNvbnN0IFJPTExCQUNLID0gJ1JPTExCQUNLJztcbmV4cG9ydCBjb25zdCBDT01NSVQgPSAnQ09NTUlUJztcbmV4cG9ydCBjb25zdCBTV0VFUCA9ICdTV0VFUCc7XG5leHBvcnQgY29uc3QgVE9HR0xFX0FDVElPTiA9ICdUT0dHTEVfQUNUSU9OJztcbmV4cG9ydCBjb25zdCBTRVRfQUNUSU9OU19BQ1RJVkUgPSAnU0VUX0FDVElPTlNfQUNUSVZFJztcbmV4cG9ydCBjb25zdCBKVU1QX1RPX1NUQVRFID0gJ0pVTVBfVE9fU1RBVEUnO1xuZXhwb3J0IGNvbnN0IEpVTVBfVE9fQUNUSU9OID0gJ0pVTVBfVE9fQUNUSU9OJztcbmV4cG9ydCBjb25zdCBJTVBPUlRfU1RBVEUgPSAnSU1QT1JUX1NUQVRFJztcblxuZXhwb3J0IGNsYXNzIFBlcmZvcm1BY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUEVSRk9STV9BQ1RJT047XG5cbiAgY29uc3RydWN0b3IocHVibGljIGFjdGlvbjogQWN0aW9uLCBwdWJsaWMgdGltZXN0YW1wOiBudW1iZXIpIHtcbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICtcbiAgICAgICAgICAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PydcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldCBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGltZXN0YW1wOiBudW1iZXIpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBSb2xsYmFjayBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBST0xMQkFDSztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGltZXN0YW1wOiBudW1iZXIpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21taXQgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ09NTUlUO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0aW1lc3RhbXA6IG51bWJlcikge31cbn1cblxuZXhwb3J0IGNsYXNzIFN3ZWVwIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNXRUVQO1xufVxuXG5leHBvcnQgY2xhc3MgVG9nZ2xlQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFRPR0dMRV9BQ1RJT047XG5cbiAgY29uc3RydWN0b3IocHVibGljIGlkOiBudW1iZXIpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRBY3Rpb25zQWN0aXZlIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9BQ1RJT05TX0FDVElWRTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc3RhcnQ6IG51bWJlcixcbiAgICBwdWJsaWMgZW5kOiBudW1iZXIsXG4gICAgcHVibGljIGFjdGl2ZTogYm9vbGVhbiA9IHRydWVcbiAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgSnVtcFRvU3RhdGUgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gSlVNUF9UT19TVEFURTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaW5kZXg6IG51bWJlcikge31cbn1cblxuZXhwb3J0IGNsYXNzIEp1bXBUb0FjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBKVU1QX1RPX0FDVElPTjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgYWN0aW9uSWQ6IG51bWJlcikge31cbn1cblxuZXhwb3J0IGNsYXNzIEltcG9ydFN0YXRlIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IElNUE9SVF9TVEFURTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmV4dExpZnRlZFN0YXRlOiBhbnkpIHt9XG59XG5cbmV4cG9ydCB0eXBlIEFsbCA9XG4gIHwgUGVyZm9ybUFjdGlvblxuICB8IFJlc2V0XG4gIHwgUm9sbGJhY2tcbiAgfCBDb21taXRcbiAgfCBTd2VlcFxuICB8IFRvZ2dsZUFjdGlvblxuICB8IFNldEFjdGlvbnNBY3RpdmVcbiAgfCBKdW1wVG9TdGF0ZVxuICB8IEp1bXBUb0FjdGlvblxuICB8IEltcG9ydFN0YXRlO1xuIl19