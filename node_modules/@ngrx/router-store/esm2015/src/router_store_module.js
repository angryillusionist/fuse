/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, InjectionToken, NgModule, } from '@angular/core';
import { NavigationCancel, NavigationError, Router, RoutesRecognized, } from '@angular/router';
import { select, Store } from '@ngrx/store';
import { of } from 'rxjs';
import { DefaultRouterStateSerializer, RouterStateSerializer, } from './serializer';
/**
 * An action dispatched when the router navigates.
 */
export const /** @type {?} */ ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';
/**
 * An action dispatched when the router cancels navigation.
 */
export const /** @type {?} */ ROUTER_CANCEL = 'ROUTER_CANCEL';
/**
 * An action dispatched when the router errors.
 */
export const /** @type {?} */ ROUTER_ERROR = 'ROUTE_ERROR';
/**
 * @template T
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
export function routerReducer(state, action) {
    switch (action.type) {
        case ROUTER_NAVIGATION:
        case ROUTER_ERROR:
        case ROUTER_CANCEL:
            return {
                state: action.payload.routerState,
                navigationId: action.payload.event.id,
            };
        default:
            return /** @type {?} */ (state);
    }
}
/**
 * @record
 */
export function StoreRouterConfig() { }
function StoreRouterConfig_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    StoreRouterConfig.prototype.stateKey;
}
export const /** @type {?} */ _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');
export const /** @type {?} */ ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');
export const /** @type {?} */ DEFAULT_ROUTER_FEATURENAME = 'routerReducer';
/**
 * @param {?} config
 * @return {?}
 */
export function _createDefaultRouterConfig(config) {
    let /** @type {?} */ _config;
    if (typeof config === 'function') {
        _config = config();
    }
    else {
        _config = config || {};
    }
    return Object.assign({ stateKey: DEFAULT_ROUTER_FEATURENAME }, _config);
}
const ɵ0 = { stateKey: DEFAULT_ROUTER_FEATURENAME };
/**
 * Connects RouterModule with StoreModule.
 *
 * During the navigation, before any guards or resolvers run, the router will dispatch
 * a ROUTER_NAVIGATION action, which has the following signature:
 *
 * ```
 * export type RouterNavigationPayload = {
 *   routerState: SerializedRouterStateSnapshot,
 *   event: RoutesRecognized
 * }
 * ```
 *
 * Either a reducer or an effect can be invoked in response to this action.
 * If the invoked reducer throws, the navigation will be canceled.
 *
 * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be
 * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.
 *
 * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation
 * which can be used to restore the consistency of the store.
 *
 * Usage:
 *
 * ```typescript
 * \@NgModule({
 *   declarations: [AppCmp, SimpleCmp],
 *   imports: [
 *     BrowserModule,
 *     StoreModule.forRoot(mapOfReducers),
 *     RouterModule.forRoot([
 *       { path: '', component: SimpleCmp },
 *       { path: 'next', component: SimpleCmp }
 *     ]),
 *     StoreRouterConnectingModule
 *   ],
 *   bootstrap: [AppCmp]
 * })
 * export class AppModule {
 * }
 * ```
 */
export class StoreRouterConnectingModule {
    /**
     * @param {?} store
     * @param {?} router
     * @param {?} serializer
     * @param {?} config
     */
    constructor(store, router, serializer, config) {
        this.store = store;
        this.router = router;
        this.serializer = serializer;
        this.config = config;
        this.dispatchTriggeredByRouter = false;
        this.navigationTriggeredByDispatch = false;
        this.stateKey = /** @type {?} */ (this.config.stateKey);
        this.setUpBeforePreactivationHook();
        this.setUpStoreStateListener();
        this.setUpStateRollbackEvents();
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            ngModule: StoreRouterConnectingModule,
            providers: [
                { provide: _ROUTER_CONFIG, useValue: config },
                {
                    provide: ROUTER_CONFIG,
                    useFactory: _createDefaultRouterConfig,
                    deps: [_ROUTER_CONFIG],
                },
            ],
        };
    }
    /**
     * @return {?}
     */
    setUpBeforePreactivationHook() {
        (/** @type {?} */ (this.router)).hooks.beforePreactivation = (routerState) => {
            this.routerState = this.serializer.serialize(routerState);
            if (this.shouldDispatchRouterNavigation())
                this.dispatchRouterNavigation();
            return of(true);
        };
    }
    /**
     * @return {?}
     */
    setUpStoreStateListener() {
        this.store.subscribe(s => {
            this.storeState = s;
        });
        this.store.pipe(select(this.stateKey)).subscribe(() => {
            this.navigateIfNeeded();
        });
    }
    /**
     * @return {?}
     */
    shouldDispatchRouterNavigation() {
        if (!this.storeState[this.stateKey])
            return true;
        return !this.navigationTriggeredByDispatch;
    }
    /**
     * @return {?}
     */
    navigateIfNeeded() {
        if (!this.storeState[this.stateKey] ||
            !this.storeState[this.stateKey].state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this.router.url !== this.storeState[this.stateKey].state.url) {
            this.navigationTriggeredByDispatch = true;
            this.router.navigateByUrl(this.storeState[this.stateKey].state.url);
        }
    }
    /**
     * @return {?}
     */
    setUpStateRollbackEvents() {
        this.router.events.subscribe(e => {
            if (e instanceof RoutesRecognized) {
                this.lastRoutesRecognized = e;
            }
            else if (e instanceof NavigationCancel) {
                this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                this.dispatchRouterError(e);
            }
        });
    }
    /**
     * @return {?}
     */
    dispatchRouterNavigation() {
        this.dispatchRouterAction(ROUTER_NAVIGATION, {
            routerState: this.routerState,
            event: new RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerState),
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dispatchRouterCancel(event) {
        this.dispatchRouterAction(ROUTER_CANCEL, {
            routerState: this.routerState,
            storeState: this.storeState,
            event,
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dispatchRouterError(event) {
        this.dispatchRouterAction(ROUTER_ERROR, {
            routerState: this.routerState,
            storeState: this.storeState,
            event: new NavigationError(event.id, event.url, `${event}`),
        });
    }
    /**
     * @param {?} type
     * @param {?} payload
     * @return {?}
     */
    dispatchRouterAction(type, payload) {
        this.dispatchTriggeredByRouter = true;
        try {
            this.store.dispatch({ type, payload });
        }
        finally {
            this.dispatchTriggeredByRouter = false;
            this.navigationTriggeredByDispatch = false;
        }
    }
}
StoreRouterConnectingModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer },
                    {
                        provide: _ROUTER_CONFIG,
                        useValue: ɵ0,
                    },
                    {
                        provide: ROUTER_CONFIG,
                        useFactory: _createDefaultRouterConfig,
                        deps: [_ROUTER_CONFIG],
                    },
                ],
            },] }
];
/** @nocollapse */
StoreRouterConnectingModule.ctorParameters = () => [
    { type: Store, },
    { type: Router, },
    { type: RouterStateSerializer, },
    { type: undefined, decorators: [{ type: Inject, args: [ROUTER_CONFIG,] },] },
];
function StoreRouterConnectingModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    StoreRouterConnectingModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    StoreRouterConnectingModule.ctorParameters;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.routerState;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.storeState;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.lastRoutesRecognized;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.dispatchTriggeredByRouter;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.navigationTriggeredByDispatch;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.stateKey;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.store;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.router;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.serializer;
    /** @type {?} */
    StoreRouterConnectingModule.prototype.config;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3N0b3JlX21vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvcm91dGVyLXN0b3JlL3NyYy9yb3V0ZXJfc3RvcmVfbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLGNBQWMsRUFFZCxRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixlQUFlLEVBQ2YsTUFBTSxFQUVOLGdCQUFnQixHQUNqQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFMUIsT0FBTyxFQUNMLDRCQUE0QixFQUM1QixxQkFBcUIsR0FFdEIsTUFBTSxjQUFjLENBQUM7Ozs7QUFLdEIsTUFBTSxDQUFDLHVCQUFNLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDOzs7O0FBcUJyRCxNQUFNLENBQUMsdUJBQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQzs7OztBQXNCN0MsTUFBTSxDQUFDLHVCQUFNLFlBQVksR0FBRyxhQUFhLENBQUM7Ozs7Ozs7QUFnQzFDLE1BQU0sd0JBQ0osS0FBd0MsRUFDeEMsTUFBNEI7SUFFNUIsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEIsS0FBSyxpQkFBaUIsQ0FBQztRQUN2QixLQUFLLFlBQVksQ0FBQztRQUNsQixLQUFLLGFBQWE7WUFDaEIsTUFBTSxDQUFDO2dCQUNMLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7Z0JBQ2pDLFlBQVksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2FBQ3RDLENBQUM7UUFDSjtZQUNFLE1BQU0sbUJBQUMsS0FBOEIsRUFB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SyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxLQUFLLENBQUM7U0FDNUM7Ozs7WUE5SUosUUFBUSxTQUFDO2dCQUNSLFNBQVMsRUFBRTtvQkFDVCxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsNEJBQTRCLEVBQUU7b0JBQzFFO3dCQUNFLE9BQU8sRUFBRSxjQUFjO3dCQUN2QixRQUFRLElBQTBDO3FCQUNuRDtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsVUFBVSxFQUFFLDBCQUEwQjt3QkFDdEMsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDO3FCQUN2QjtpQkFDRjthQUNGOzs7O1lBOUxnQixLQUFLO1lBSnBCLE1BQU07WUFTTixxQkFBcUI7NENBME5sQixNQUFNLFNBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdCxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIE1vZHVsZVdpdGhQcm92aWRlcnMsXG4gIE5nTW9kdWxlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIE5hdmlnYXRpb25DYW5jZWwsXG4gIE5hdmlnYXRpb25FcnJvcixcbiAgUm91dGVyLFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxuICBSb3V0ZXNSZWNvZ25pemVkLFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgc2VsZWN0LCBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIERlZmF1bHRSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIsXG4gIFJvdXRlclN0YXRlU2VyaWFsaXplcixcbiAgU2VyaWFsaXplZFJvdXRlclN0YXRlU25hcHNob3QsXG59IGZyb20gJy4vc2VyaWFsaXplcic7XG5cbi8qKlxuICogQW4gYWN0aW9uIGRpc3BhdGNoZWQgd2hlbiB0aGUgcm91dGVyIG5hdmlnYXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFJPVVRFUl9OQVZJR0FUSU9OID0gJ1JPVVRFUl9OQVZJR0FUSU9OJztcblxuLyoqXG4gKiBQYXlsb2FkIG9mIFJPVVRFUl9OQVZJR0FUSU9OLlxuICovXG5leHBvcnQgdHlwZSBSb3V0ZXJOYXZpZ2F0aW9uUGF5bG9hZDxUPiA9IHtcbiAgcm91dGVyU3RhdGU6IFQ7XG4gIGV2ZW50OiBSb3V0ZXNSZWNvZ25pemVkO1xufTtcblxuLyoqXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgbmF2aWdhdGVzLlxuICovXG5leHBvcnQgdHlwZSBSb3V0ZXJOYXZpZ2F0aW9uQWN0aW9uPFQgPSBTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdD4gPSB7XG4gIHR5cGU6IHR5cGVvZiBST1VURVJfTkFWSUdBVElPTjtcbiAgcGF5bG9hZDogUm91dGVyTmF2aWdhdGlvblBheWxvYWQ8VD47XG59O1xuXG4vKipcbiAqIEFuIGFjdGlvbiBkaXNwYXRjaGVkIHdoZW4gdGhlIHJvdXRlciBjYW5jZWxzIG5hdmlnYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBST1VURVJfQ0FOQ0VMID0gJ1JPVVRFUl9DQU5DRUwnO1xuXG4vKipcbiAqIFBheWxvYWQgb2YgUk9VVEVSX0NBTkNFTC5cbiAqL1xuZXhwb3J0IHR5cGUgUm91dGVyQ2FuY2VsUGF5bG9hZDxULCBWPiA9IHtcbiAgcm91dGVyU3RhdGU6IFY7XG4gIHN0b3JlU3RhdGU6IFQ7XG4gIGV2ZW50OiBOYXZpZ2F0aW9uQ2FuY2VsO1xufTtcblxuLyoqXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgY2FuY2VsIG5hdmlnYXRpb24uXG4gKi9cbmV4cG9ydCB0eXBlIFJvdXRlckNhbmNlbEFjdGlvbjxULCBWID0gU2VyaWFsaXplZFJvdXRlclN0YXRlU25hcHNob3Q+ID0ge1xuICB0eXBlOiB0eXBlb2YgUk9VVEVSX0NBTkNFTDtcbiAgcGF5bG9hZDogUm91dGVyQ2FuY2VsUGF5bG9hZDxULCBWPjtcbn07XG5cbi8qKlxuICogQW4gYWN0aW9uIGRpc3BhdGNoZWQgd2hlbiB0aGUgcm91dGVyIGVycm9ycy5cbiAqL1xuZXhwb3J0IGNvbnN0IFJPVVRFUl9FUlJPUiA9ICdST1VURV9FUlJPUic7XG5cbi8qKlxuICogUGF5bG9hZCBvZiBST1VURVJfRVJST1IuXG4gKi9cbmV4cG9ydCB0eXBlIFJvdXRlckVycm9yUGF5bG9hZDxULCBWPiA9IHtcbiAgcm91dGVyU3RhdGU6IFY7XG4gIHN0b3JlU3RhdGU6IFQ7XG4gIGV2ZW50OiBOYXZpZ2F0aW9uRXJyb3I7XG59O1xuXG4vKipcbiAqIEFuIGFjdGlvbiBkaXNwYXRjaGVkIHdoZW4gdGhlIHJvdXRlciBlcnJvcnMuXG4gKi9cbmV4cG9ydCB0eXBlIFJvdXRlckVycm9yQWN0aW9uPFQsIFYgPSBTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdD4gPSB7XG4gIHR5cGU6IHR5cGVvZiBST1VURVJfRVJST1I7XG4gIHBheWxvYWQ6IFJvdXRlckVycm9yUGF5bG9hZDxULCBWPjtcbn07XG5cbi8qKlxuICogQW4gdW5pb24gdHlwZSBvZiByb3V0ZXIgYWN0aW9ucy5cbiAqL1xuZXhwb3J0IHR5cGUgUm91dGVyQWN0aW9uPFQsIFYgPSBTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdD4gPVxuICB8IFJvdXRlck5hdmlnYXRpb25BY3Rpb248Vj5cbiAgfCBSb3V0ZXJDYW5jZWxBY3Rpb248VCwgVj5cbiAgfCBSb3V0ZXJFcnJvckFjdGlvbjxULCBWPjtcblxuZXhwb3J0IHR5cGUgUm91dGVyUmVkdWNlclN0YXRlPFQgPSBTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdD4gPSB7XG4gIHN0YXRlOiBUO1xuICBuYXZpZ2F0aW9uSWQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByb3V0ZXJSZWR1Y2VyPFQgPSBTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdD4oXG4gIHN0YXRlOiBSb3V0ZXJSZWR1Y2VyU3RhdGU8VD4gfCB1bmRlZmluZWQsXG4gIGFjdGlvbjogUm91dGVyQWN0aW9uPGFueSwgVD5cbik6IFJvdXRlclJlZHVjZXJTdGF0ZTxUPiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJPVVRFUl9OQVZJR0FUSU9OOlxuICAgIGNhc2UgUk9VVEVSX0VSUk9SOlxuICAgIGNhc2UgUk9VVEVSX0NBTkNFTDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlOiBhY3Rpb24ucGF5bG9hZC5yb3V0ZXJTdGF0ZSxcbiAgICAgICAgbmF2aWdhdGlvbklkOiBhY3Rpb24ucGF5bG9hZC5ldmVudC5pZCxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZSBhcyBSb3V0ZXJSZWR1Y2VyU3RhdGU8VD47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdG9yZVJvdXRlckNvbmZpZyB7XG4gIHN0YXRlS2V5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgX1JPVVRFUl9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdAbmdyeC9yb3V0ZXItc3RvcmUgSW50ZXJuYWwgQ29uZmlndXJhdGlvbidcbik7XG5leHBvcnQgY29uc3QgUk9VVEVSX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3JvdXRlci1zdG9yZSBDb25maWd1cmF0aW9uJ1xuKTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JPVVRFUl9GRUFUVVJFTkFNRSA9ICdyb3V0ZXJSZWR1Y2VyJztcblxuZXhwb3J0IGZ1bmN0aW9uIF9jcmVhdGVEZWZhdWx0Um91dGVyQ29uZmlnKFxuICBjb25maWc6IFN0b3JlUm91dGVyQ29uZmlnIHwgU3RvcmVSb3V0ZXJDb25maWdGdW5jdGlvblxuKTogU3RvcmVSb3V0ZXJDb25maWcge1xuICBsZXQgX2NvbmZpZzogU3RvcmVSb3V0ZXJDb25maWc7XG5cbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBfY29uZmlnID0gY29uZmlnKCk7XG4gIH0gZWxzZSB7XG4gICAgX2NvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhdGVLZXk6IERFRkFVTFRfUk9VVEVSX0ZFQVRVUkVOQU1FLFxuICAgIC4uLl9jb25maWcsXG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFN0b3JlUm91dGVyQ29uZmlnRnVuY3Rpb24gPSAoKSA9PiBTdG9yZVJvdXRlckNvbmZpZztcblxuLyoqXG4gKiBDb25uZWN0cyBSb3V0ZXJNb2R1bGUgd2l0aCBTdG9yZU1vZHVsZS5cbiAqXG4gKiBEdXJpbmcgdGhlIG5hdmlnYXRpb24sIGJlZm9yZSBhbnkgZ3VhcmRzIG9yIHJlc29sdmVycyBydW4sIHRoZSByb3V0ZXIgd2lsbCBkaXNwYXRjaFxuICogYSBST1VURVJfTkFWSUdBVElPTiBhY3Rpb24sIHdoaWNoIGhhcyB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAqXG4gKiBgYGBcbiAqIGV4cG9ydCB0eXBlIFJvdXRlck5hdmlnYXRpb25QYXlsb2FkID0ge1xuICogICByb3V0ZXJTdGF0ZTogU2VyaWFsaXplZFJvdXRlclN0YXRlU25hcHNob3QsXG4gKiAgIGV2ZW50OiBSb3V0ZXNSZWNvZ25pemVkXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBFaXRoZXIgYSByZWR1Y2VyIG9yIGFuIGVmZmVjdCBjYW4gYmUgaW52b2tlZCBpbiByZXNwb25zZSB0byB0aGlzIGFjdGlvbi5cbiAqIElmIHRoZSBpbnZva2VkIHJlZHVjZXIgdGhyb3dzLCB0aGUgbmF2aWdhdGlvbiB3aWxsIGJlIGNhbmNlbGVkLlxuICpcbiAqIElmIG5hdmlnYXRpb24gZ2V0cyBjYW5jZWxlZCBiZWNhdXNlIG9mIGEgZ3VhcmQsIGEgUk9VVEVSX0NBTkNFTCBhY3Rpb24gd2lsbCBiZVxuICogZGlzcGF0Y2hlZC4gSWYgbmF2aWdhdGlvbiByZXN1bHRzIGluIGFuIGVycm9yLCBhIFJPVVRFUl9FUlJPUiBhY3Rpb24gd2lsbCBiZSBkaXNwYXRjaGVkLlxuICpcbiAqIEJvdGggUk9VVEVSX0NBTkNFTCBhbmQgUk9VVEVSX0VSUk9SIGNvbnRhaW4gdGhlIHN0b3JlIHN0YXRlIGJlZm9yZSB0aGUgbmF2aWdhdGlvblxuICogd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSB0aGUgY29uc2lzdGVuY3kgb2YgdGhlIHN0b3JlLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGRlY2xhcmF0aW9uczogW0FwcENtcCwgU2ltcGxlQ21wXSxcbiAqICAgaW1wb3J0czogW1xuICogICAgIEJyb3dzZXJNb2R1bGUsXG4gKiAgICAgU3RvcmVNb2R1bGUuZm9yUm9vdChtYXBPZlJlZHVjZXJzKSxcbiAqICAgICBSb3V0ZXJNb2R1bGUuZm9yUm9vdChbXG4gKiAgICAgICB7IHBhdGg6ICcnLCBjb21wb25lbnQ6IFNpbXBsZUNtcCB9LFxuICogICAgICAgeyBwYXRoOiAnbmV4dCcsIGNvbXBvbmVudDogU2ltcGxlQ21wIH1cbiAqICAgICBdKSxcbiAqICAgICBTdG9yZVJvdXRlckNvbm5lY3RpbmdNb2R1bGVcbiAqICAgXSxcbiAqICAgYm9vdHN0cmFwOiBbQXBwQ21wXVxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge1xuICogfVxuICogYGBgXG4gKi9cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogUm91dGVyU3RhdGVTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdFJvdXRlclN0YXRlU2VyaWFsaXplciB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IF9ST1VURVJfQ09ORklHLFxuICAgICAgdXNlVmFsdWU6IHsgc3RhdGVLZXk6IERFRkFVTFRfUk9VVEVSX0ZFQVRVUkVOQU1FIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBST1VURVJfQ09ORklHLFxuICAgICAgdXNlRmFjdG9yeTogX2NyZWF0ZURlZmF1bHRSb3V0ZXJDb25maWcsXG4gICAgICBkZXBzOiBbX1JPVVRFUl9DT05GSUddLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFN0b3JlUm91dGVyQ29ubmVjdGluZ01vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KFxuICAgIGNvbmZpZz86IFN0b3JlUm91dGVyQ29uZmlnIHwgU3RvcmVSb3V0ZXJDb25maWdGdW5jdGlvblxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzO1xuICBzdGF0aWMgZm9yUm9vdChcbiAgICBjb25maWc6IFN0b3JlUm91dGVyQ29uZmlnIHwgU3RvcmVSb3V0ZXJDb25maWdGdW5jdGlvbiA9IHt9XG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogU3RvcmVSb3V0ZXJDb25uZWN0aW5nTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogX1JPVVRFUl9DT05GSUcsIHVzZVZhbHVlOiBjb25maWcgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFJPVVRFUl9DT05GSUcsXG4gICAgICAgICAgdXNlRmFjdG9yeTogX2NyZWF0ZURlZmF1bHRSb3V0ZXJDb25maWcsXG4gICAgICAgICAgZGVwczogW19ST1VURVJfQ09ORklHXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgcm91dGVyU3RhdGU6IFNlcmlhbGl6ZWRSb3V0ZXJTdGF0ZVNuYXBzaG90O1xuICBwcml2YXRlIHN0b3JlU3RhdGU6IGFueTtcbiAgcHJpdmF0ZSBsYXN0Um91dGVzUmVjb2duaXplZDogUm91dGVzUmVjb2duaXplZDtcblxuICBwcml2YXRlIGRpc3BhdGNoVHJpZ2dlcmVkQnlSb3V0ZXI6IGJvb2xlYW4gPSBmYWxzZTsgLy8gdXNlZCBvbmx5IGluIGRldiBtb2RlIGluIGNvbWJpbmF0aW9uIHdpdGggcm91dGVyUmVkdWNlclxuICBwcml2YXRlIG5hdmlnYXRpb25UcmlnZ2VyZWRCeURpc3BhdGNoOiBib29sZWFuID0gZmFsc2U7IC8vIHVzZWQgb25seSBpbiBkZXYgbW9kZSBpbiBjb21iaW5hdGlvbiB3aXRoIHJvdXRlclJlZHVjZXJcbiAgcHJpdmF0ZSBzdGF0ZUtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4sXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIHNlcmlhbGl6ZXI6IFJvdXRlclN0YXRlU2VyaWFsaXplcjxTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdD4sXG4gICAgQEluamVjdChST1VURVJfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogU3RvcmVSb3V0ZXJDb25maWdcbiAgKSB7XG4gICAgdGhpcy5zdGF0ZUtleSA9IHRoaXMuY29uZmlnLnN0YXRlS2V5IGFzIHN0cmluZztcblxuICAgIHRoaXMuc2V0VXBCZWZvcmVQcmVhY3RpdmF0aW9uSG9vaygpO1xuICAgIHRoaXMuc2V0VXBTdG9yZVN0YXRlTGlzdGVuZXIoKTtcbiAgICB0aGlzLnNldFVwU3RhdGVSb2xsYmFja0V2ZW50cygpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRVcEJlZm9yZVByZWFjdGl2YXRpb25Ib29rKCk6IHZvaWQge1xuICAgICg8YW55PnRoaXMucm91dGVyKS5ob29rcy5iZWZvcmVQcmVhY3RpdmF0aW9uID0gKFxuICAgICAgcm91dGVyU3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgICApID0+IHtcbiAgICAgIHRoaXMucm91dGVyU3RhdGUgPSB0aGlzLnNlcmlhbGl6ZXIuc2VyaWFsaXplKHJvdXRlclN0YXRlKTtcbiAgICAgIGlmICh0aGlzLnNob3VsZERpc3BhdGNoUm91dGVyTmF2aWdhdGlvbigpKVxuICAgICAgICB0aGlzLmRpc3BhdGNoUm91dGVyTmF2aWdhdGlvbigpO1xuICAgICAgcmV0dXJuIG9mKHRydWUpO1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHNldFVwU3RvcmVTdGF0ZUxpc3RlbmVyKCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmUuc3Vic2NyaWJlKHMgPT4ge1xuICAgICAgdGhpcy5zdG9yZVN0YXRlID0gcztcbiAgICB9KTtcbiAgICB0aGlzLnN0b3JlLnBpcGUoc2VsZWN0KHRoaXMuc3RhdGVLZXkpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5uYXZpZ2F0ZUlmTmVlZGVkKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNob3VsZERpc3BhdGNoUm91dGVyTmF2aWdhdGlvbigpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuc3RvcmVTdGF0ZVt0aGlzLnN0YXRlS2V5XSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICF0aGlzLm5hdmlnYXRpb25UcmlnZ2VyZWRCeURpc3BhdGNoO1xuICB9XG5cbiAgcHJpdmF0ZSBuYXZpZ2F0ZUlmTmVlZGVkKCk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgICF0aGlzLnN0b3JlU3RhdGVbdGhpcy5zdGF0ZUtleV0gfHxcbiAgICAgICF0aGlzLnN0b3JlU3RhdGVbdGhpcy5zdGF0ZUtleV0uc3RhdGVcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGlzcGF0Y2hUcmlnZ2VyZWRCeVJvdXRlcikgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMucm91dGVyLnVybCAhPT0gdGhpcy5zdG9yZVN0YXRlW3RoaXMuc3RhdGVLZXldLnN0YXRlLnVybCkge1xuICAgICAgdGhpcy5uYXZpZ2F0aW9uVHJpZ2dlcmVkQnlEaXNwYXRjaCA9IHRydWU7XG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHRoaXMuc3RvcmVTdGF0ZVt0aGlzLnN0YXRlS2V5XS5zdGF0ZS51cmwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VXBTdGF0ZVJvbGxiYWNrRXZlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMucm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoZSA9PiB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIFJvdXRlc1JlY29nbml6ZWQpIHtcbiAgICAgICAgdGhpcy5sYXN0Um91dGVzUmVjb2duaXplZCA9IGU7XG4gICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hSb3V0ZXJDYW5jZWwoZSk7XG4gICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRXJyb3IpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaFJvdXRlckVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaFJvdXRlck5hdmlnYXRpb24oKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaFJvdXRlckFjdGlvbihST1VURVJfTkFWSUdBVElPTiwge1xuICAgICAgcm91dGVyU3RhdGU6IHRoaXMucm91dGVyU3RhdGUsXG4gICAgICBldmVudDogbmV3IFJvdXRlc1JlY29nbml6ZWQoXG4gICAgICAgIHRoaXMubGFzdFJvdXRlc1JlY29nbml6ZWQuaWQsXG4gICAgICAgIHRoaXMubGFzdFJvdXRlc1JlY29nbml6ZWQudXJsLFxuICAgICAgICB0aGlzLmxhc3RSb3V0ZXNSZWNvZ25pemVkLnVybEFmdGVyUmVkaXJlY3RzLFxuICAgICAgICB0aGlzLnJvdXRlclN0YXRlXG4gICAgICApLFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaFJvdXRlckNhbmNlbChldmVudDogTmF2aWdhdGlvbkNhbmNlbCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2hSb3V0ZXJBY3Rpb24oUk9VVEVSX0NBTkNFTCwge1xuICAgICAgcm91dGVyU3RhdGU6IHRoaXMucm91dGVyU3RhdGUsXG4gICAgICBzdG9yZVN0YXRlOiB0aGlzLnN0b3JlU3RhdGUsXG4gICAgICBldmVudCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hSb3V0ZXJFcnJvcihldmVudDogTmF2aWdhdGlvbkVycm9yKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaFJvdXRlckFjdGlvbihST1VURVJfRVJST1IsIHtcbiAgICAgIHJvdXRlclN0YXRlOiB0aGlzLnJvdXRlclN0YXRlLFxuICAgICAgc3RvcmVTdGF0ZTogdGhpcy5zdG9yZVN0YXRlLFxuICAgICAgZXZlbnQ6IG5ldyBOYXZpZ2F0aW9uRXJyb3IoZXZlbnQuaWQsIGV2ZW50LnVybCwgYCR7ZXZlbnR9YCksXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGRpc3BhdGNoUm91dGVyQWN0aW9uKHR5cGU6IHN0cmluZywgcGF5bG9hZDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaFRyaWdnZXJlZEJ5Um91dGVyID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7IHR5cGUsIHBheWxvYWQgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hUcmlnZ2VyZWRCeVJvdXRlciA9IGZhbHNlO1xuICAgICAgdGhpcy5uYXZpZ2F0aW9uVHJpZ2dlcmVkQnlEaXNwYXRjaCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19